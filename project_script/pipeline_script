/* Last Modified:20190328 1700 */

/* ARM & ATOM Git change log file name */
def GIT_LOG_FNAME_ARM = "DailyBuild_ARM-ChangeLog-"
def GIT_LOG_FNAME_ATOM = "DailyBuild_ATOM-ChangeLog-"
/* Summary of CH7465CE Test Result */
env.TR_EXECUTED = "NA"
env.TR_PASS     = "NA"
env.TR_FAIL     = "NA"
env.TR_SKIP     = "NA"
env.TR_PASSRATE = "NA"
def TR_ROOT_DIR          	= "/home/cbn/FW_space"
def TR_SUMMARY_FILE      	= "ch7465ce-result_summary.txt"
def TR_REPORT_FILE       	= "ch7465ce-results.html"
def TR_EMAIL_REPORT_FILE_Default 	= "DailyBuild_CH7465CE_2-Report-"
def TR_EMAIL_CONSOLE_FILE_Default 	= "DailyBuild_CH7465CE_2-Console-"
def TR_EMAIL_TEXT_FILE		= "DailyBuild_CH7465CE_2-Text-"

/* Summary of CH7469CE Test Result */
env.TR_EXECUTED2 = "NA"
env.TR_PASS2     = "NA"
env.TR_FAIL2     = "NA"
env.TR_BLOCKED2  = "NA"
env.TR_PASSRATE2 = "NA"
def TR_SUMMARY_FILE2      = "ch7469ce-result_summary.txt"
def TR_REPORT_FILE2       = "ch7469ce-results.html"
def TR_EMAIL_REPORT_FILE2 = "DailyBuild_CH7469CE-Report-"

/* Jenkins Server- (DailyBuild_CH7465CE) */
def JENKINS_LOGIN_USR 			= "cbn"
def JENKINS_IP 					= "172.16.1.218"
def JENKINS_PROJECT_HOME 		= "/home/cbn/jenkins_home/workspace/${JOB_NAME}"
def JENKINS_PROJECT_JOB 		= "/home/cbn/jenkins_home/jobs/${JOB_NAME}"

/* Boardfarm Server */
def BOARDFARM_LOGIN_USR = "cbn"
def BOARDFARM_IP = "172.16.1.218"
def BOARDFARM_TFTP_ROOT = "/home/cbn/FW_space"
def BOARDFARM_SLAVE_HOME ="/home/cbn/jenkins_slave/workspace/${JOB_NAME}"

/* Boardfarm Server2 */
def BOARDFARM2_LOGIN_USR = "cbn"
def BOARDFARM2_IP = "10.118.251.160"

/* CH7465CE Profile */
def ARM_PROFILE_NAME = "ch7465c_lgi"
def ARM_BUILD_CODE_LOG = "${ARM_PROFILE_NAME}.log"
def ATOM_BUILD_CODE_LOG = "${ARM_PROFILE_NAME}_atom.log"

/* PA Firmware Image */
def FI_PA_FILE = ""
def FI_SH_PA_FILE = ""
def FI_SH_PA_FILE_HEAD = "CH7465LG-NCIP-"
def FI_SH_PA_FILE_MID  = ""
def FI_SH_PA_FILE_TAIL = "-SH-PA"

/* P7 Firmware Image */
def FI_SH_NNEMN_P7_FILE = ""
def FI_SH_NNEMN_P7_FILE_TAIL  = ".NNEMN.p7"
def FI_SH_P7_FILE = ""
def FI_SH_P7_FILE_REMOVE_STR = "-PA.NNEMN"
def FI_SH_NNEMN_P7_FILE_HTTP = ""
/* Daily build */
def MODEL = "CH7465CE"
def DATE_STRING = ""
def DAILY_BUILD_FOLDER = "dailybuild"

/* E-mail*/
def TEMP_RECIPIENT3= "sy_huang@compalbn.com, lynn_lin@compalbn.com, nero_chen@compalbn.com, cookie_tseng@compalbn.com, martin_wu@compalbn.com, luke_tseng@compalbn.com, vincent_huang@compalbn.com, amo_lin@compalbn.com , jessie_hsieh@compalbn.com, yiyu_hsieh@compalbn.com, ren_chen@compalbn.com, kity_lee@compalbn.com, cicdb-internal@libertyglobal.com, mamcclintock.consultant@libertyglobal.com, rjvisser@libertyglobal.com"
def TEMP_RECIPIENT2= "cookie_tseng@compalbn.com"
def TEMP_RECIPIENT4= "gerben_chen@compalbn.com, jessie_hsieh@compalbn.com, lynn_lin@compalbn.com"
def TEMP_RECIPIENT1= "lynn_lin@compalbn.com, nero_chen@compalbn.com, cookie_tseng@compalbn.com, martin_wu@compalbn.com, luke_tseng@compalbn.com, samuel_chuang@compalbn.com, gerben_chen@compalbn.com"
def TEMP_RECIPIENT0= "nero_chen@compalbn.com"
def TEMP_RECIPIENT= "gerben_chen@compalbn.com, lynn_lin@compalbn.com, jessie_hsieh@compalbn.com"
/* Connect User*/
def USER_FOLDER = "cbn_generic_1"
def USER_NAME= "cbnmat"
def USER_PWD= "just4mat"
def Log_parser= "Null"
def Project_Token = "cbngeneric7465_1"
def Jenkins_server = "http://10.118.252.30:8080"
def Project_name = "DailyTest_CH7465CE_2_cbn_generic_management_1"
def category = "generic"
/* Control DUT */
def DUT = ""
def feature = "-f generic"
/* Testsuite */
def testsuite_choose = ""
/* Sign P7 Image Status */
def Sign_P7_Image_Success 	= "Sign P7 Image Success"
def Sign_P7_Image_Fail		= "Sign P7 Image Fail"
def Sign_P7_Image_Status 	= ""

/* Upgrade Firmware Status */
def Upgrade_FW_Success = "Upgrade Firmware Success"
def Upgrade_FW_Fail    = "Upgrade Firmware Failure"
def Upgrade_FW_Status  = ""

/* Git Clone Status */
def Git_Clone_Success = "Git Clone Success"
def Git_Clone_Fail = "Git Clone Falure"
def Git_Clone_Status = ""

/* Git Cm Cfg */
def Copy_Cm_Cfg_Success = "Copy Cm Cfg Success"
def Copy_Cm_Cfg_Fail = "Copy Cm Cfg Falure"
def Copy_Cm_Cfg_Status = ""

/* Run Test Status */
def Run_Test_Success = "Run Test Success"
def Run_Test_Fail    = "Run Test Failure"
def Run_Test_Status  = ""
def Run_Test_Status2 = ""
list = ["cbn_generic_gui","cbn_generic_management_1","cbn_generic_plume","cbn_generic_stability"]
//list = ["cbn_generic_stability"]
list_count = list.size()
for (int i = 0; i < list_count; i++) {
    testsuite_choose = list[i]
    timestamps {
        node("master"){
            //Create directory for daily build
            dir("${env.WORKSPACE}"){
                DATE_STRING = sh(script:'printf "%s" "`date +%Y%m%d`"', returnStdout:true)
                sh("mkdir -p ./${DAILY_BUILD_FOLDER}/${MODEL}/${DATE_STRING}")
        		FI_SH_PA_FILE_MID = "6.15.27-${DATE_STRING}"
        		FI_SH_PA_FILE = "${FI_SH_PA_FILE_HEAD}${FI_SH_PA_FILE_MID}${FI_SH_PA_FILE_TAIL}"
            }
        }
		node("cbn_ixia"){
            stage('Check FW NAME -s'){
				echo "===================Check FW NAME -s START==================="
                try{
                    FI_SH_NNEMN_P7_FILE = sh(script:"re=`python /home/cbn_ixia/cbn/sign_7465_fwname.py -n ch7465ce -f P7` ; printf \$re ", returnStdout:true)
                    echo "${FI_SH_NNEMN_P7_FILE}"                    
                }catch(err){
					echo "Check FW NAME -s FAIL"
				}
				echo "===================Check FW NAME -s FINISH==================="
            }
			stage('Check E-mail Title'){
				echo "===================Check E-mail Title START==================="
                try{                    
                    FI_SH_PA_FILE = sh(script:"re=`python /home/cbn_ixia/cbn/sign_7465_fwname.py -n ch7465ce -f PA_TITLE` ; printf \$re ", returnStdout:true)
                }catch(err){
					echo "Check E-mail Title FAIL"
				}
				echo "===================Check E-mail Title FINISH==================="
            }
			stage('Check HTTP FW NAME -m'){	
				echo "===================Check HTTP FW NAME -m START==================="
				try{
					FI_SH_NNEMN_P7_FILE_HTTP = sh(script:"re=`python /home/cbn_ixia/cbn/fwname_check.py` ; printf \$re ", returnStdout:true)
					echo "FI_SH_NNEMN_P7_FILE_HTTP: ${FI_SH_NNEMN_P7_FILE_HTTP}"
				}catch(err){
					echo "Check HTTP FW NAME -m FAIL"
				}
				echo "===================Check HTTP FW NAME -m FINISH==================="
			}
        }
        node("cbn_generic_1"){
            stage('Remove Old Result'){
                echo "===================Remove Old Result START==================="
                try{
                    sh("cd /home/${USER_FOLDER}/cbn/boardfarm/results/ && rm *.txt")
                }catch(err){
                    echo "Txt File Is Empty"
                }
                echo "===================Remove Old Result FINISH==================="
            }
        	/*stage('Git Clone'){
				echo "===================Git Clone START==================="
        		try {
        			sh("(/home/${USER_FOLDER}/cbn/git_clone_cmd)")
        			echo 'Git Clone Success'
                    Git_Clone_Status = "${Git_Clone_Success}"
        		} catch (err){
        		    echo "${err}"
        			echo 'Git Clone Falure'
        			Git_Clone_Status = "${Git_Clone_Fail}"
        		}
        		echo "Starting Git Clone actions..."
        		echo "Git_Clone_Status = ${Git_Clone_Status}"
        		if(Git_Clone_Status == "${Git_Clone_Fail}") {
        			currentBuild.result = 'FAILURE'
        			//send email
        			emailext body: '${JELLY_SCRIPT,template=\"template_git.jelly\"}',
        			recipientProviders: [[$class: 'DevelopersRecipientProvider']],
        			replyTo: '$DEFAULT_REPLYTO',
        			subject: "${JOB_NAME} - Build # ${BUILD_NUMBER} - ${currentBuild.result} (${Git_Clone_Status})",
        			//to: '$DEFAULT_RECIPIENTS'
        			to: "${TEMP_RECIPIENT}"
        			error 'Post-Git Clone actions:Git Clone Fail'
        		}
				echo "===================Git Clone FINISH==================="
        	}*/
			stage('Run CH7465CE Test'){
                echo "===================Run CH7465CE Test START==================="               
                try {			
					//Run test case
                    sh("(export BFT_CONFIG=/home/${USER_FOLDER}/cbn/boardfarm-cbn/cbn.json; \
        			export BFT_OVERLAY=/home/${USER_FOLDER}/cbn/boardfarm-cbn; \
        			cd /home/${USER_FOLDER}/cbn/boardfarm; \
        			/home/${USER_FOLDER}/cbn/boardfarm/bft -b mv1 -x ${testsuite_choose} -c /home/${USER_FOLDER}/cbn/boardfarm-cbn/cbn.json -m ${FI_SH_NNEMN_P7_FILE_HTTP} -s ${FI_SH_NNEMN_P7_FILE} ${feature})")
				    Run_Test_Status = "${Run_Test_Success}"
                } catch (err){
					echo "Boardfarm Error"
					Run_Test_Status = "${Run_Test_Fail}"
				}
				echo "===================Run CH7465CE Test FINISH==================="
			}
			
			stage('CH7465CE SUMMARY AND RESULT'){
				echo "===================CH7465CE SUMMARY AND RESULT START==================="
                try{   
					//Generate test summary and results to /tftpboot
                    sh("(export PATH=/home/${USER_FOLDER}/cbn/sign_image:${PATH}; Get_Result_Summary -m ch7465ce -p /home/${USER_FOLDER}/cbn/boardfarm/results/results.html)")

                    //Set Test Summary
                    env.TR_EXECUTED = sh(script:"cut -d: -f1 ${TR_ROOT_DIR}/${TR_SUMMARY_FILE}", returnStdout:true)
                    env.TR_PASS     = sh(script:"cut -d: -f2 ${TR_ROOT_DIR}/${TR_SUMMARY_FILE}", returnStdout:true)
                    env.TR_FAIL     = sh(script:"cut -d: -f3 ${TR_ROOT_DIR}/${TR_SUMMARY_FILE}", returnStdout:true)
                    env.TR_SKIP     = sh(script:"cut -d: -f4 ${TR_ROOT_DIR}/${TR_SUMMARY_FILE}", returnStdout:true)
                    env.TR_PASSRATE = sh(script:"cut -d: -f5 ${TR_ROOT_DIR}/${TR_SUMMARY_FILE}", returnStdout:true)
                    //Copy Test report to Jenkins Server
                    TR_EMAIL_REPORT_FILE="${TR_EMAIL_REPORT_FILE_Default}${testsuite_choose}-${DATE_STRING}.html"
                    sh("scp ${TR_ROOT_DIR}/${TR_REPORT_FILE} ${JENKINS_LOGIN_USR}@${JENKINS_IP}:${JENKINS_PROJECT_HOME}/${DAILY_BUILD_FOLDER}/${MODEL}/${DATE_STRING}/${TR_EMAIL_REPORT_FILE}")
                    echo 'Summary Result Success'
                } catch (err){
                    echo 'Summary Result Fail'
                }
				echo "===================CH7465CE SUMMARY AND RESULT FINISH==================="
            }
			
			stage('Starting Post-Run test actions'){ 
				echo "===================Starting Post-Run test actions START==================="
				echo "Run_Test_Status = ${Run_Test_Status}"
				//check DUT
				stage('Check Using Board'){
					echo "===================Check Using Board START==================="
					try {
						DUT = sh(script:"re=`python /home/${USER_FOLDER}/cbn/jenkins_dut_check.py -u \'${Jenkins_server}/\' -j \'${Project_name}\' -U ${USER_NAME} -P ${USER_PWD} -i ${BUILD_NUMBER}` ; printf \$re ", returnStdout:true)
					} catch(err){}					
					echo "===================Check Using Board FINISH==================="
					
                }        	
				stage('Parser test results for RootFSBootTest'){
					echo "===================Parser test results for RootFSBootTest START==================="
					dir("/home/${USER_FOLDER}/cbn/boardfarm/results"){
					//Get test result of RootFSBootTest from test_results.json
						Test_Result_Grade = sh(script:"re=`cat test_results.json | jq '.test_results[0].grade' | sed 's/\"//g'`; printf \$re", returnStdout:true)
						Test_Result_Name = sh(script:"re=`cat test_results.json | jq '.test_results[0].name' | sed 's/\"//g'`; printf \$re", returnStdout:true)
					}
					echo "===================Parser test results for RootFSBootTest FINISH==================="
				}				
				stage('When Result Is RootFSBootTest Restart Test'){
					echo "===================When Result Is RootFSBootTest Restart Test START==================="
					if( "FAIL" == "${Test_Result_Grade}") {
						echo "${Test_Result_Name} Status ${Test_Result_Grade}"
						currentBuild.result = 'FAILURE'
						Run_Test_Status = "Run ${Test_Result_Name} FAILURE"                			
						try {
							Log_parser = sh(script:"re=`python /home/${USER_FOLDER}/cbn/jenkins_parser_case.py -u \'${Jenkins_server}/\' -j \'${Project_name}\' -U ${USER_NAME} -P ${USER_PWD} -i ${BUILD_NUMBER} -n ${USER_FOLDER} -t ${Project_Token}` ; printf \$re ", returnStdout:true)
							echo "===================Test Restarting......==================="
						} catch(err){
							echo "===================Restart Test Fail==================="
						}
						if ("Null" != "${Log_parser}") {
							echo "${Log_parser}"
							currentBuild.result = 'FAILURE'
							Log_parser_status = "${Log_parser}"
							//send email
							emailext body: '${JELLY_SCRIPT,template=\"template_git.jelly\"}',
							recipientProviders: [[$class: 'DevelopersRecipientProvider']],
							replyTo: '$DEFAULT_REPLYTO',
							subject: "${JOB_NAME} - Build # ${BUILD_NUMBER} - ${currentBuild.result} (${DUT} ${Log_parser_status})",
							to: "${TEMP_RECIPIENT}"
							error 'Post-Upgrade firmware actions:Upgrade firmware failure'
						}
						//send email
						emailext body: '${JELLY_SCRIPT,template=\"template_git.jelly\"}',
						recipientProviders: [[$class: 'DevelopersRecipientProvider']],
						replyTo: '$DEFAULT_REPLYTO',
						subject: "${JOB_NAME} - Build # ${BUILD_NUMBER} - ${currentBuild.result} (${Run_Test_Status})",
						to: "${TEMP_RECIPIENT}"						
						error 'Post-Run Test actions:Run Test failure'
					}
					echo "===================When Result Is RootFSBootTest Restart Test FINISH==================="
				}				
				if (Run_Test_Status == "${Run_Test_Fail}"){					
					currentBuild.result = 'FAILURE'					
					//send email
					emailext body: '${JELLY_SCRIPT,template=\"template_git.jelly\"}',
					recipientProviders: [[$class: 'DevelopersRecipientProvider']],
					replyTo: '$DEFAULT_REPLYTO',
					subject: "${JOB_NAME} - Build # ${BUILD_NUMBER} - ${currentBuild.result} (${Run_Test_Status})",
					to: "${TEMP_RECIPIENT}"
					error 'Post-Run Test actions:Run Test failure'
				}			
				currentBuild.result = 'SUCCESS'
				echo "===================Starting Post-Run test actions FINISH==================="
			}
			stage('Copy Console Log'){
				echo "===================Copy Console Log START==================="
				Wed_Path_Url 			= "http://${JENKINS_IP}:8080/job/${JOB_NAME}/lastBuild/consoleText"
				TR_EMAIL_CONSOLE_FILE	= "${TR_EMAIL_CONSOLE_FILE_Default}${testsuite_choose}-${DATE_STRING}.log"
				withCredentials([usernamePassword(credentialsId: '59dbf979-31c9-4fbc-8870-7cc7e91fd58e', usernameVariable: 'JENKINSUSER', passwordVariable: 'JENKINSPWD')]) {
					sh("cd ~/cbn/sign_image; \
        			curl -u ${JENKINSUSER}:${JENKINSPWD} ${Wed_Path_Url} > console_output; \
        			scp ./console_output ${JENKINS_LOGIN_USR}@${JENKINS_IP}:${JENKINS_PROJECT_HOME}/${DAILY_BUILD_FOLDER}/${MODEL}/${DATE_STRING}/${TR_EMAIL_CONSOLE_FILE}")
				}
				echo "===================Copy Console Log FINISH==================="
			}
			stage('Compression File'){
				echo "===================Compression File START==================="
				TR_EMAIL_TEXT_FILE="${TR_EMAIL_TEXT_FILE}${DATE_STRING}.zip"
				sh("cd /home/${USER_FOLDER}/cbn/boardfarm/results; \
        		zip results.zip *.txt *.log; \
        		scp ./results.zip ${JENKINS_LOGIN_USR}@${JENKINS_IP}:${JENKINS_PROJECT_HOME}/${DAILY_BUILD_FOLDER}/${MODEL}/${DATE_STRING}/${TR_EMAIL_TEXT_FILE}")
				echo "===================Compression File FINISH==================="
			}
        }
        node("result_integration"){
            try{
                sh("cp /home/${USER_FOLDER}/cbn/boardfarm/results/results.html /home/result_integration/${category}/${testsuite_choose}.html")
                echo 'Copy result.html to result_integration pass'
            }catch(err){
                echo 'Copy result.html to result_integration fail'
            }
        }
        node("master"){            
            //send email
            emailext attachmentsPattern: "**/${TR_EMAIL_REPORT_FILE}",
            body:'${JELLY_SCRIPT,template=\"templatereport_git2.jelly\"}',
            recipientProviders: [[$class: 'DevelopersRecipientProvider']],
            replyTo: '$DEFAULT_REPLYTO',
            subject: "${JOB_NAME} - Build # ${BUILD_NUMBER} - ${testsuite_choose} - (${currentBuild.result}),${FI_SH_PA_FILE}",
            //to: '$DEFAULT_RECIPIENTS'
            to: "${TEMP_RECIPIENT}"
            echo 'Completed daily build and daily testing'
        }
    }
}
